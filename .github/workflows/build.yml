name: Build & (optionally) publish artifacts

on:
  pull_request: {}
  push:
    branches: [main, master]
    tags: ["v*"]

jobs:
  build-android-libraries:
    name: Build android libraries
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      jni_hashes: ${{ steps.vars.outputs.jni_libs_sha }}
      jni_all_hashes: ${{ steps.vars.outputs.all_jni_libs_sha }}

    steps:
      - name: Save logcat output
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: logcat
          path: artifacts/logcat.log
      - name: checkout
        uses: actions/checkout@v4

      - name: rust toolchain setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,x86_64-linux-android,i686-linux-android

      - name: install cargo ndk
        run: cargo install cargo-ndk

      - name: build all targets
        run: |
          cargo ndk-env
          cargo ndk \
            -t armeabi-v7a \
            -t arm64-v8a \
            -t x86 \
            -t x86_64 \
            -o ./target/jniLibs build --profile release-space-optimized || true
          rm -r ./target/jniLibs || true
          mkdir -p ./target/jniLibs/{armeabi-v7a,arm64-v8a,x86,x86_64}
          cp ./target/armv7-linux-androideabi/release-space-optimized/libapprelay.so ./target/jniLibs/armeabi-v7a/libapprelay.so
          cp ./target/aarch64-linux-android/release-space-optimized/libapprelay.so ./target/jniLibs/arm64-v8a/libapprelay.so
          cp ./target/i686-linux-android/release-space-optimized/libapprelay.so ./target/jniLibs/x86/libapprelay.so
          cp ./target/x86_64-linux-android/release-space-optimized/libapprelay.so ./target/jniLibs/x86_64/libapprelay.so

      - name: Create tarball
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          cd ./target/jniLibs
          tar -czvf jniLibs.tar.gz *

      - name: Set checksum var
        if: startsWith(github.ref, 'refs/tags/v')
        id: vars
        run: |
          echo "jni_libs_sha=$(sha256sum target/jniLibs/jniLibs.tar.gz)" >> "$GITHUB_OUTPUT"
          # https://github.com/orgs/community/discussions/26288#discussioncomment-3251220
          sums="$(sha256sum ./target/jniLibs/**/*.so)"
          sums="${sums//'%'/'%25'}"
          sums="${sums//$'\n'/'%0A'}"
          sums="${sums//$'\r'/'%0D'}"

          echo "all_jni_libs_sha=$sums" >> "$GITHUB_OUTPUT"

      # android
      - name: Upload android libs
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: android-jni
          path: target/jniLibs/jniLibs.tar.gz

  build-ios-libraries:
    name: Build ios libraries
    runs-on: macos-latest
    outputs:
      hashes: ${{ steps.vars.outputs.ios_sha }}

    steps:
      - name: Save logcat output
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: logcat
          path: artifacts/logcat.log
      - name: checkout
        uses: actions/checkout@v4
      - name: rust toolchain setup
        uses: dtolnay/rust-toolchain@stable

      - name: ensure we have xcode installed
        run: xcrun --show-sdk-build-version

      - name: build all targets
        run: |
          declare -a arches=("x86_64-apple-ios" "aarch64-apple-ios" "x86_64-apple-ios" "aarch64-apple-ios-sim" )
          for i in "${arches[@]}"
          do
             rustup target add $i
             echo "building for arch $i"
             cargo build --target $i \
                --no-default-features \
                --profile release-space-optimized
             dir="./target/ios_libs/$i"
             mkdir -p "$dir"
             ls -al ./target/$i/release-space-optimized/
             cp ./target/$i/release-space-optimized/libapprelay.{dylib,so,a} "$dir" || true
          done

      - name: package
        run: |
          mkdir include
          cp apprelay/apprelay.h include
          xcodebuild -create-xcframework \
            -library target/aarch64-apple-ios/release-space-optimized/libapprelay.a -headers include \
            -library target/aarch64-apple-ios-sim/release-space-optimized/libapprelay.a -headers include \
            -output LibAppRelay.xcframework
          lipo -create target/aarch64-apple-ios-sim/release-space-optimized/libapprelay.a \
             target/x86_64-apple-ios/release-space-optimized/libapprelay.a \
             -output LibAppRelay.xcframework/ios-arm64-simulator/libapprelay.a
          zip -vr LibAppRelay.xcframework.zip LibAppRelay.xcframework

      - name: Set checksum var
        if: startsWith(github.ref, 'refs/tags/v')
        id: vars
        run: echo "ios_sha=$(shasum -a 256 LibAppRelay.xcframework.zip)" >> "$GITHUB_OUTPUT"

      - name: Upload iOS xcframework
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: ios-xc
          path: LibAppRelay.xcframework.zip

  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-android-libraries, build-ios-libraries]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v4 # android lib
        with:
          name: android-jni
          path: .

      - uses: actions/download-artifact@v4 # iOS lib
        with:
          name: ios-xc
          path: .

      - name: Upload android asset to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: jniLibs.tar.gz
          asset_name: jniLibs.tar.gz
          tag: ${{ github.ref }}

      - name: Upload iOS asset to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: LibAppRelay.xcframework.zip
          asset_name: LibAppRelay.xcframework.zip
          tag: ${{ github.ref }}

  hashes:
    name: Collect Asset Hashes
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-android-libraries, build-ios-libraries]
    runs-on: ubuntu-latest

    steps:
      - name: Generate hashes
        run: |
          echo "${{  needs.build-ios-libraries.outputs.hashes }}" >> hashes.txt
          echo "${{  needs.build-android-libraries.outputs.jni_hashes }}" >> hashes.txt
          echo "${{  needs.build-android-libraries.outputs.jni_all_hashes }}" >> hashes.txt

      - name: Upload asset hashes
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: hashes.txt
          asset_name: hashes.txt
          tag: ${{ github.ref }}
